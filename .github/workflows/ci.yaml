name: Terraform Module CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
    paths:
      - 'modules/ec2/**'
      - 'modules/s3/**'
      - '.github/workflows/**'
env:
  GITHUB_TOKEN: ${{secrets.GH_PAT}}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ec2: ${{ steps.filter.outputs.ec2 }}
      s3: ${{ steps.filter.outputs.s3 }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ec2:
              - 'modules/ec2/**'
            s3:
              - 'modules/s3/**'

  lint:
    strategy:
      matrix:
        module: [ec2, s3]
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Skip if no changes in module
        if: ${{ needs.detect-changes.outputs[matrix.module] != 'true' }}
        run: echo "No changes in ${{ matrix.module }}, skipping..." && exit 0
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Run Makefile lint targets
        run: |
          make init-${{ matrix.module }}
          make lint-${{ matrix.module }} || true

      - name: Comment TFLint (if exists)
        if:  ${{ failure() && env.MODULE == matrix.module }}
        uses: GetTerminus/terraform-pr-commenter@v1
        with:
          commenter_type: "tflint"
          commenter_input: "./.${{ matrix.module }}/tflint_output.txt"
          github_token: ${{ secrets.GH_PAT }}

      - name: Terraform FMT
        working-directory: modules/${{ matrix.module }}
        run: terraform fmt -check -recursive || true

      - name: Terraform Validate
        working-directory: modules/${{ matrix.module }}
        run: terraform validate || true

  security-scan:
    strategy:
      matrix:
        module: [ec2, s3]
    needs: lint
    if: needs.lint.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code
        with:
          fetch-depth: 0

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Run Terraform Init
        run: make init-${{ matrix.module }}

      - name: Run TFSEC scan & comment
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ secrets.GH_PAT }}
          working_directory: .${{ matrix.module }}

  plan:
    strategy:
      matrix:
        module: [ec2, s3]
    needs: [lint, security-scan]
    if: needs.lint.result == 'success' && needs.security-scan.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      - name: Terraform Plan
        id: plan
        run: |
          make plan-${{ matrix.module }} | tee plan.txt

      - name: Truncate plan output
        run: |
          head -c 65000 plan.txt > truncated_plan.txt
          echo "Truncated plan output for safer PR comment"
          exit 0

      - name: Comment Terraform plan in PR
        uses: GetTerminus/terraform-pr-commenter@v3
        with:
          commenter_type: "plan"
          commenter_input: "./truncated_plan.txt"
          github_token: ${{ env.GITHUB_TOKEN }}

  build:
    strategy:
      matrix:
        module: [ec2, s3]
    needs: [plan]
    if: github.event_name == 'pull_request' && needs.plan.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install bump CLI
        run: npm install -g bump

      - name: Create artifact zip
        run: zip -r ${{ matrix.module }}-module.zip .${{ matrix.module }}

      - name: Determine bump strategy from branch name
        id: bump-strategy
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          echo "Branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == feature/* ]]; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == fix/* ]]; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == breaking/* ]]; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          else
            echo "bump_type=prepatch" >> $GITHUB_OUTPUT
          ficho "bump_type=prepatch" >> $GITHUB_OUTPUT
            fi

      - name: Run bump (beta tag only)
        id: bump
        run: |
          VERSION=$(npx bump prepatch --preid beta --tag --commit --push --print)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          files: ${{ matrix.module }}-module.zip

      - name: Comment Tag in PR
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            :rocket: **${{ matrix.module }} Module Beta Released!**
            Version: `${{ env.VERSION }}` was published and tagged.

