name: Terraform Module Release Conditional Sequential

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

env:
  GITHUB_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ec2: ${{ steps.filter.outputs.ec2 }}
      s3: ${{ steps.filter.outputs.s3 }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ec2:
              - 'ec2.tf'
              - 'modules/ec2/**'
            s3:
              - 's3.tf'
              - 'modules/s3/**'

  release-ec2:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ec2 == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq zip
          npm install semver

      - name: Release EC2 module
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE 'Merge pull request #[0-9]+ from .+/(.+)' | cut -d/ -f2-)
          echo "Merged branch: $MERGED_BRANCH"

          if [[ "$MERGED_BRANCH" == feature/* ]]; then
            BUMP_TYPE="minor"
          elif [[ "$MERGED_BRANCH" == fix/* ]]; then
            BUMP_TYPE="patch"
          elif [[ "$MERGED_BRANCH" == breaking/* ]]; then
            BUMP_TYPE="major"
          else
            BUMP_TYPE="patch"
          fi

          MODULE=ec2
          echo "Releasing $MODULE module with bump type: $BUMP_TYPE"
          cd modules/$MODULE
          CURRENT=$(jq -r .version package.json)

          NEXT=$(npx semver "$CURRENT" -i "$BUMP_TYPE")
          echo "Next version: $NEXT"

          jq ".version = \"$NEXT\"" package.json > tmp && mv tmp package.json

          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "chore($MODULE): release v$NEXT"
          git tag "${MODULE}-v$NEXT"

          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}
          git pull origin HEAD
          git push origin HEAD
          git push origin "${MODULE}-v$NEXT"

          echo "TAG_NAME=${MODULE}-v${NEXT}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${NEXT}" >> $GITHUB_ENV
          cd ../..

      - name: Create EC2 artifact (ec2.tf + modules/ec2)
        run: |
          VERSION=${{ env.RELEASE_VERSION }}
          ZIP_NAME="ec2-v${VERSION}.zip"
          zip -r "$ZIP_NAME" ec2.tf modules/ec2

      - name: Upload EC2 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ec2-v${{ env.RELEASE_VERSION }}
          path: ec2-v${{ env.RELEASE_VERSION }}.zip

      - name: Create GitHub Release for EC2
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ec2-v${{ env.RELEASE_VERSION }}
          name: "ec2 module v${{ env.RELEASE_VERSION }}"
          files: ec2-v${{ env.RELEASE_VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  release-s3:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.s3 == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq zip
          npm install semver

      - name: Release S3 module
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          MERGED_BRANCH=$(git log -1 --pretty=%B | grep -oE 'Merge pull request #[0-9]+ from .+/(.+)' | cut -d/ -f2-)
          echo "Merged branch: $MERGED_BRANCH"

          if [[ "$MERGED_BRANCH" == feature/* ]]; then
            BUMP_TYPE="minor"
          elif [[ "$MERGED_BRANCH" == fix/* ]]; then
            BUMP_TYPE="patch"
          elif [[ "$MERGED_BRANCH" == breaking/* ]]; then
            BUMP_TYPE="major"
          else
            BUMP_TYPE="patch"
          fi

          MODULE=s3
          echo "Releasing $MODULE module with bump type: $BUMP_TYPE"
          cd modules/$MODULE
          CURRENT=$(jq -r .version package.json)

          NEXT=$(npx semver "$CURRENT" -i "$BUMP_TYPE")
          echo "Next version: $NEXT"

          jq ".version = \"$NEXT\"" package.json > tmp && mv tmp package.json

          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "chore($MODULE): release v$NEXT"
          git tag "${MODULE}-v$NEXT"

          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}
          git push origin HEAD
          git push origin "${MODULE}-v$NEXT"

          echo "TAG_NAME=${MODULE}-v${NEXT}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${NEXT}" >> $GITHUB_ENV
          cd ../..

      - name: Create S3 artifact (s3.tf + modules/s3)
        run: |
          VERSION=${{ env.RELEASE_VERSION }}
          ZIP_NAME="s3-v${VERSION}.zip"
          zip -r "$ZIP_NAME" s3.tf modules/s3

      - name: Upload S3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3-v${{ env.RELEASE_VERSION }}
          path: s3-v${{ env.RELEASE_VERSION }}.zip

      - name: Create GitHub Release for S3
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: s3-v${{ env.RELEASE_VERSION }}
          name: "s3 module v${{ env.RELEASE_VERSION }}"
          files: s3-v${{ env.RELEASE_VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

